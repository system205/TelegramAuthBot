services:
  auth-bot:
    container_name: auth-bot
    image: system205/telegram-auth-bot:latest
    restart: always
    depends_on:
      - postgresql-db
    environment:
      spring.datasource.url: jdbc:postgresql://postgresql-db:5432/telegram
      spring.kafka.bootstrap-servers: kafka:9092
      telegram.kafka.enabled: true
      web-client.base-url: "http://host.docker.internal:8080"
    env_file:
      - bot.env

  postgresql-db:
    container_name: postgresql-db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: telegram
    env_file:
      - db.env
    volumes:
      - postgres-volume:/var/lib/postgresql/data

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.6
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka_data:/bitnami

volumes:
  postgres-volume:
  kafka_data:
    driver: local